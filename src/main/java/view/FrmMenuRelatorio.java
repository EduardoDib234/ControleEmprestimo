/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import model.Amigo;
import dao.AmigoDAO;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import model.Ferramenta;
import dao.FerramentaDAO;
import java.sql.SQLException;
import model.Emprestimo;
import dao.EmprestimoDAO;
import dao.RelatorioDAO;

/**
 *
 * @author Administrator
 */
public class FrmMenuRelatorio extends javax.swing.JFrame {

    private AmigoDAO amigoDAO;
    private FerramentaDAO ferramentaDAO;
    private EmprestimoDAO emprestimoDAO;
    private RelatorioDAO relatorioDAO;
    
    /**
     * Creates new form FrmMenuRelatorio
     */
    public FrmMenuRelatorio() {
        initComponents();
        this.amigoDAO = new AmigoDAO();
        this.ferramentaDAO = new FerramentaDAO();
        this.emprestimoDAO = EmprestimoDAO.getInstance();
        this.carregaTabelaFerramentaDisponivel();
        this.relatorioDAO = new RelatorioDAO();
        this.carregaTabelaFerramentaindisponivel();
        this.carregaTabelaFerramentaReparo();
        this.carregaTabelaEmprestimoAtivo();
        this.carregaTabelaEmprestimo();
        this.carregaTabelaAmigoNuncaDevolveu();
        this.carregaTabelaAmigosMaisEmprestimo();
        this.carregaValorTotalFerramentas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTCustoTotal = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTFerramentasdisponivel = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTFerramentaindisponivel = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTFerramentareparo = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTAmigosinadimplente = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTTopAmigo = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTemprestimoativo = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTemprestimo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relatorio");

        jLabel3.setText("Ferramentas:");

        jButton10.setText("Sair");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel7.setText("Custo de Todas as Ferramentas: ");

        jTCustoTotal.setEditable(false);

        jTFerramentasdisponivel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Marca", "Custo", "Status"
            }
        ));
        jTFerramentasdisponivel.setEnabled(false);
        jTFerramentasdisponivel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTFerramentasdisponivelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTFerramentasdisponivel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFerramentasdisponivelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTFerramentasdisponivel);

        jTabbedPane1.addTab("Ferramentas Disponíveis", jScrollPane1);

        jTFerramentaindisponivel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Marca", "Custo", "Status"
            }
        ));
        jTFerramentaindisponivel.setEnabled(false);
        jTFerramentaindisponivel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTFerramentaindisponivelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTFerramentaindisponivel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFerramentaindisponivelMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTFerramentaindisponivel);

        jTabbedPane1.addTab("Ferramnetas Indisponíveis", jScrollPane7);

        jTFerramentareparo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Marca", "Custo", "Status"
            }
        ));
        jTFerramentareparo.setEnabled(false);
        jTFerramentareparo.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTFerramentareparoAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTFerramentareparo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFerramentareparoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTFerramentareparo);

        jTabbedPane1.addTab("Ferramentas em manutenção", jScrollPane3);

        jTAmigosinadimplente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Telefone", "Score"
            }
        ));
        jTAmigosinadimplente.setEnabled(false);
        jScrollPane6.setViewportView(jTAmigosinadimplente);

        jTabbedPane2.addTab("Amigos que nunca devolveu", jScrollPane6);

        jTTopAmigo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Telefone", "Score", "Qtd"
            }
        ));
        jTTopAmigo.setEnabled(false);
        jScrollPane4.setViewportView(jTTopAmigo);

        jTabbedPane2.addTab("Amigos que mais pegou empréstimo", jScrollPane4);

        jLabel4.setText("Empréstimos:");

        jLabel1.setText("Amigos:");

        jTemprestimoativo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "amigo", "qtd ferramentas", "custo", "data_emprestimo", "data_devolução", "dias restantes", "status"
            }
        ));
        jTemprestimoativo.setToolTipText("");
        jTemprestimoativo.setEnabled(false);
        jTemprestimoativo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTemprestimoativoMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTemprestimoativo);

        jTabbedPane3.addTab("Empréstimos Ativos", jScrollPane5);

        jTemprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "amigo", "qtd ferramentas", "custo", "data_emprestimo", "data_devolução", "dias restantes", "status"
            }
        ));
        jTemprestimo.setToolTipText("");
        jTemprestimo.setEnabled(false);
        jTemprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTemprestimoMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTemprestimo);

        jTabbedPane3.addTab("Todos os Empréstimos", jScrollPane8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(264, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTCustoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTCustoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton10)
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFerramentasdisponivelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTFerramentasdisponivelAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFerramentasdisponivelAncestorAdded

    private void jTFerramentasdisponivelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFerramentasdisponivelMouseClicked

    }//GEN-LAST:event_jTFerramentasdisponivelMouseClicked

    private void jTFerramentareparoAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTFerramentareparoAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFerramentareparoAncestorAdded

    private void jTFerramentareparoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFerramentareparoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFerramentareparoMouseClicked

    private void jTemprestimoativoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTemprestimoativoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTemprestimoativoMouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        FrmMenuPrincipal objeto = new FrmMenuPrincipal();
        objeto.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTFerramentaindisponivelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTFerramentaindisponivelAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFerramentaindisponivelAncestorAdded

    private void jTFerramentaindisponivelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFerramentaindisponivelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFerramentaindisponivelMouseClicked

    private void jTemprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTemprestimoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTemprestimoMouseClicked

    public void carregaValorTotalFerramentas(){
        this.jTCustoTotal.setText(String.valueOf(relatorioDAO.custoTotal()));
    }
    
    public void carregaTabelaFerramentaDisponivel() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTFerramentasdisponivel.getModel();
        modelo.setNumRows(0);  // Limpa a tabela antes de recarregar

        ArrayList<Ferramenta> minhalista = ferramentaDAO.getMinhaLista();  // Lista de Ferramentas

        String change;
        for (Ferramenta a : minhalista) {
            if (a.getStatus() == 1) {
                change = "Disponível";
                modelo.addRow(new Object[]{
                    a.getId(),
                    a.getNome(),
                    a.getMarca(),
                    a.getCusto(),
                    change
                });
            }
        }
    }
    
    public void carregaTabelaFerramentaindisponivel() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTFerramentaindisponivel.getModel();
        modelo.setNumRows(0);  // Limpa a tabela antes de recarregar

        ArrayList<Ferramenta> minhalista = ferramentaDAO.getMinhaLista();  // Lista de Ferramentas

        String change;
        for (Ferramenta a : minhalista) {
            if (a.getStatus() == 0) {
                change = "Indisponível";
                modelo.addRow(new Object[]{
                    a.getId(),
                    a.getNome(),
                    a.getMarca(),
                    a.getCusto(),
                    change
                });
            }
        }
    }
    
    public void carregaTabelaFerramentaReparo() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTFerramentareparo.getModel();
        modelo.setNumRows(0);  // Limpa a tabela antes de recarregar

        ArrayList<Ferramenta> minhalista = ferramentaDAO.getMinhaLista();  // Lista de Ferramentas

        String change;
        for (Ferramenta a : minhalista) {
            if (a.getStatus() == 2) {
                change = "Reparo";
                modelo.addRow(new Object[]{
                    a.getId(),
                    a.getNome(),
                    a.getMarca(),
                    a.getCusto(),
                    change
                });
            }
        }
    }
    
    public void carregaTabelaAmigosMaisEmprestimo(){
        DefaultTableModel modelo = (DefaultTableModel) this.jTTopAmigo.getModel();
        modelo.setNumRows(0);  // Limpa a tabela antes de recarregar
        
        ArrayList<int[]> idEQtd = relatorioDAO.buscaAmigosMaisEmprestimo();
        
        for(int[] arr : idEQtd){
            Amigo amigo = amigoDAO.carregaAmigo(arr[0]);
            modelo.addRow(new Object[]{
                amigo.getId(),
                amigo.getNome(),
                amigo.getTelefone(),
                amigo.getScore(),
                arr[1]});
        }
    }
    
    public void carregaTabelaAmigoNuncaDevolveu(){
        DefaultTableModel modelo = (DefaultTableModel) this.jTAmigosinadimplente.getModel();
        modelo.setNumRows(0);  // Limpa a tabela antes de recarregar
        
        ArrayList<Amigo> amigosInadiplentes = relatorioDAO.amigosNuncaDevolveram();
        
        for (Amigo amigo : amigosInadiplentes) {
            modelo.addRow(new Object[]{
                amigo.getId(),
                amigo.getNome(),
                amigo.getTelefone(),
                amigo.getScore(),});
        }
    }
    
    public void carregaTabelaEmprestimoAtivo() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTemprestimoativo.getModel();
        modelo.setNumRows(0); // Limpa a tabela antes de preencher

        // Obtém a lista de empréstimos do DAO
        ArrayList<Emprestimo> minhalista = emprestimoDAO.listarEmprestimos();

        for (Emprestimo emprestimo : minhalista) {
            double valorTotal = emprestimo.calcularValorTotal();
            String situacaoEmprestimo = "Em aberto";

            // Cálculo do tempo restante
            long diasRestantes = emprestimo.tempoRestante(
                    emprestimo.getDataInicial().toLocalDate(),
                    emprestimo.getDataDevolucao().toLocalDate()
            );

            String nomeAmigo = "";
            try {
                // Tenta obter o nome do amigo
                nomeAmigo = emprestimoDAO.buscarNomeAmigoPorId(emprestimo.getIdAmigo());
            } catch (SQLException e) {
                // Caso ocorra um erro na consulta ao banco, exibe um erro no console
                e.printStackTrace(); // Exibe o stack trace do erro
                nomeAmigo = "Erro ao buscar nome"; // Mensagem padrão caso haja erro
            }

            // Adiciona os dados na tabela
            if(emprestimo.getStatus().getCodigo() == 1){
                modelo.addRow(new Object[]{
                    emprestimo.getIdEmprestimo(),
                    nomeAmigo,
                    emprestimo.qtdFerramentasEmprestimo(emprestimo.getIdEmprestimo()),
                    emprestimo.getCustoTotal(),
                    emprestimo.getDataInicial(),
                    emprestimo.getDataDevolucao(),
                    diasRestantes,
                    situacaoEmprestimo
                });
            }
        }
    }
    
    public void carregaTabelaEmprestimo() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTemprestimo.getModel();
        modelo.setNumRows(0); // Limpa a tabela antes de preencher

        // Obtém a lista de empréstimos do DAO
        ArrayList<Emprestimo> minhalista = emprestimoDAO.listarEmprestimos();

        for (Emprestimo emprestimo : minhalista) {
            double valorTotal = emprestimo.calcularValorTotal();
            String situacaoEmprestimo;

            // Define o status textual com base no código do status
            switch (emprestimo.getStatus().getCodigo()) {
                case 1:
                    situacaoEmprestimo = "Em aberto";
                    break;
                case 2:
                    situacaoEmprestimo = "Finalizado";
                    break;
                case 3:
                    situacaoEmprestimo = "Atrasado";
                    break;
                default:
                    situacaoEmprestimo = "Desconhecido";
                    break;
            }

            // Cálculo do tempo restante
            long diasRestantes = emprestimo.tempoRestante(
                    emprestimo.getDataInicial().toLocalDate(),
                    emprestimo.getDataDevolucao().toLocalDate()
            );

            String nomeAmigo = "";
            try {
                // Tenta obter o nome do amigo
                nomeAmigo = emprestimoDAO.buscarNomeAmigoPorId(emprestimo.getIdAmigo());
            } catch (SQLException e) {
                // Caso ocorra um erro na consulta ao banco, exibe um erro no console
                e.printStackTrace(); // Exibe o stack trace do erro
                nomeAmigo = "Erro ao buscar nome"; // Mensagem padrão caso haja erro
            }

            // Adiciona os dados na tabela
            modelo.addRow(new Object[]{
                emprestimo.getIdEmprestimo(),
                nomeAmigo,
                emprestimo.qtdFerramentasEmprestimo(emprestimo.getIdEmprestimo()),
                emprestimo.getCustoTotal(),
                emprestimo.getDataInicial(),
                emprestimo.getDataDevolucao(),
                diasRestantes,
                situacaoEmprestimo
            });
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMenuRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMenuRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMenuRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMenuRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMenuRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTAmigosinadimplente;
    private javax.swing.JTextField jTCustoTotal;
    private javax.swing.JTable jTFerramentaindisponivel;
    private javax.swing.JTable jTFerramentareparo;
    private javax.swing.JTable jTFerramentasdisponivel;
    private javax.swing.JTable jTTopAmigo;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTemprestimo;
    private javax.swing.JTable jTemprestimoativo;
    // End of variables declaration//GEN-END:variables
}
